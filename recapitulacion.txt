package main

import (
	"fmt"
)

func main() {   
	
	// *** Declaracion de constantes:
	// Es un valor que no va a varia en el tiempo
	const pi1 float64 = 3.14
	const pi2 = 3.1415

	fmt.Println("pi1: ", pi1)
	fmt.Println("PI: ", pi2)

	// *** Declaracion variables enteras

	base := 12          // Utilizar ":=" indica que es la primera vez que se inicializa la variable entera
	var altura int = 14 // se utiliza "var" + "nombre de variable" + "tipo de variable"
	var area int        //Se crea data con tipo pero sin inicializar, osea vacio (en caso de string es "vacio")

	fmt.Println(base, altura, area)

	// Zero values: Valor por defecto para variables sin inicializar,

	var a int
	var b float64
	var c string
	var d bool

	fmt.Println(a, b, c, d)

	// Area Cuadrado.

	const baseCuadrado = 10
	areaCuadrado := baseCuadrado * baseCuadrado

	fmt.Println("Area del cuadrado: ", areaCuadrado)
	// *** operaciones basicas

    x := 10
	y := 50

	// suma "+"
	result := x + y
	fmt.Println("Suma: ", result)

	// resta "-"
	result = y - x
	fmt.Println("Resta: ", result)

	// multiplicacion "*"
	result = x * y
	fmt.Println("Multiplicación: ", result)

	// division cociente "/"
	result = y / x
	fmt.Println("multiplicacion cociente: ", result)

	// division reciduo "%" (modulo)
	result = y % x
	fmt.Println("division residuo: ", result)

	//inclemetnal = incremental suma una (01) unidad a una variable
	x++
	fmt.Println("incremental de 10: ", x)

	//decremental = disminuye, resta una unidad en uno a una variable.
	x--
	fmt.Println("decremental de 11: ", x)

    // *** Datos primitivos, tipos de datos

	// int: Numeros enteros,
	//	Si no defines indice, por defecto toma segun la arquitectura del equipo de computo
	// 	int8 = 8bits = -128 a 127
	// 	int16 = 16bits = -2^15 a 2^15-1
	// 	int32 = 32bits = -2^31 a 2^31-1
	// 	int64 = 64bits = -2^63 a 2^63-1

	// Optimizar memoria cuando sabemos que el dato simpre va ser positivo
	// 	uint = Depende del OS (32 o 64 bits)
	// 	uint8 = 8bits = 0 a 127
	// 	uint16 = 16bits = 0 a 2^15-1
	// 	uint32 = 32bits = 0 a 2^31-1
	// 	uint64 = 64bits = 0 a 2^63-1

	// numeros decimales
	// 	float32 = 32 bits = +/- 1.18e^-38 +/- -3.4e^38
	// 	float64 = 64 bits = +/- 2.23e^-308 +/- -1.8e^308

	// textos
	// 	string = "", es neceasio definir texto entre comillas.
	// booleanos
	// 	bool = true or false

	// numeros complejos
	// 	Complex64 = Real e Imaginario float32
	// 	Complex128 = Real e Imaginario float64
	// 		Ejemplo : c:=10 + 8i

	// *** Paquete fmt: interactuar en consola

	//Println: imprime con salto de linea

	helloMessage := "Hello"
	worlMessage := "world"

	fmt.Println(helloMessage, worlMessage)
	fmt.Println(helloMessage, worlMessage)

	//Pritnf: imprimir con formato

	nombre := "Platzi"
	cursos := 500

	// %s = recibe un string
	// %d = recibe un entero
	// \n salto de linea

	fmt.Printf("%s tiene más de %d cursos\n", nombre, cursos)

	// %v = no se sabe que tipo de dato se recibe
	fmt.Printf("%v tiene más de %v cursos\n", nombre, cursos)

	/*
		Cuando sabemos que tipo de variables son podemos usar

			bool:                    %t
			int, int8 etc.:          %d
			uint, uint8 etc.:        %d, %#x if printed with %#v
			float32, complex64, etc: %g
			string:                  %s
			chan:                    %p
			pointer:                 %p
	*/

	// Sprintf: Guarda un string
	message := fmt.Sprintf("%s tiene más de %d cursos", nombre, cursos)
	fmt.Println(message)

	// Tipo de dato, conocer

	fmt.Printf("helloMessage: %T\n", helloMessage)
	fmt.Printf("cursos: %T\n", cursos)

// **** Redundar en codigo -FUNCIONES Y FUNCIONES ANONIMAS

import (
	"fmt"
	"math"
)


// 1. se utiliza la palabra reservada "func"
func nombreFuncion(nombreVariable string) {
	fmt.Println(nombreVariable)
}

// 2. en ocaciones se necesitan multiples argumentos y tipos de datos
// Se puede agrupár los mismos tipos de datos ejemplo: a, b int
func multipleArgumento(a, b int, c float64, d string, e bool) {
	fmt.Println(a, b, c, d, e)
}

// 3. Funcion que retorna un valor.
func retornaValor(base, altura uint) uint {
	return base * altura
}

// 4. Funcion que retoran varios valores
func retoroMultiple(radio float64) (circunferenciaCirculo, areaCirculo float64) {
	return 2 * math.Pi * radio, math.Pi * math.Pow(radio, 2)

}

func main() {
	// se invoca la funcion llamandola por su nombre y escribiendo en los parentesis el valor de los argumentos o variables

	// 1. funcion nombreFuncion
	nombreFuncion("Hola Mundo")

	// 2. funcion multipleArgumneto
	multipleArgumento(1, 2, 3.1415, "hola", false)

	// 3. funcion retornaValor
	areaRectangulo := retornaValor(2, 4)
	fmt.Println("Area Rectangulo: ", areaRectangulo)

	// 4. funcion retornoMultiple
	circunferencia, areaCirculo := retoroMultiple(13)
	fmt.Printf("Circunferencia: %g \nArea de un circulo: %g", circunferencia, areaCirculo)

	// 4.1 funcion retornoMultiple, CON UN SOLO RETURN
	_, areaCirculo2 := retoroMultiple(3)
	// SE REEMPLAZA LA VARIABLE A RETORNAR POR UN guion piso "_"
	fmt.Printf("Area de un circulo: %g\n", areaCirculo2)

	// **** Documentacion en go 
	// go doc
}

// *** CICLOS
// EN go SOLO EXISTE UN CICLO, << for >>

func main() {
	// 01.	for basico: condicional (FOR TRADICIONAL)
	// 		IDNICAR AL INICIO PARA QUE ITERE, INCREMENTE Y FINALICE SEGUN LA CONDICION.
	for i := 0; i <= 3; i++ {
		fmt.Println("la iternacia es: ", i)
	}

	// 02.	for while
	// 		SE DEBE CUMPLIR UNA CONDICION PARA QUE FINALICE EL CICLO.
	//		la condicion se define previamente
	contador := 4
	for contador < 8 {
		fmt.Println("la iternacia es: ", contador)
		contador++
	}

	// 03. for forever: ITERANDO HASTA LA ETERNIDAD
	//		NO SE ESPECIFICA NINGUNA CONDICION, SE EJECUTARA HASTA EL INFINITO
	contador = 4
	for {
		fmt.Println("la iternacia es: ", contador)
		contador++
	}
	// 04. for REVERSA
	contador = 11
	for 8 <= contador {
		fmt.Println("la iternacia es: ", contador)
		contador--
	}
}

****	Operadores lógicos y de comparación
Son operadores que permiten hacer una comparación de condiciones y, en caso de cumplirse ó no, ejecutarán un código determinado. 
Si se cumple es VERDADERO/TRUE y si no se cumple son FALSO/FALSE.

Empecemos con los operadores de comparación:

Operadores de comparación:
Son aquellos que retornan TRUE o FALSE en caso de cumplirse o no una expresión. Son los siguientes:

valor1 == valor2: Retorna TRUE si valor1 y valor2 son exactamente iguales.
valor1 != valor2: Retorna TRUE si valor1 es diferente de valor2.
valor1 < valor2: Retorna TRUE si valor1 es menor que valor2
valor1 > valor2: Retorna TRUE si valor1 es mayor que valor2
valor1 >= valor2: Retorna TRUE si valor1 es igual o mayor que valor2
valor1 <= valor2: Retorna TRUE si valor1 es menor o igual que valor2.

Operadores lógicos
Son aquellos que retorna TRUE o FALSE si cumplen o no una condición utilizando puertas lógicas.

Operador AND (&&):
Este operador indica que todas las condiciones declaradas deben cumplirse para poderse marcar como TRUE. 
En Go, se utiliza este símbolo &&.

Ejemplo1: 1 > 0 && 2 > 0 Esto retornará TRUE porque tanto la primera como la segunda condición son verdaderas.
Ejemplo2: 2 < 0 && 1 > 0 Esto retornará FALSE porque una de las condiciones no es verdadera.

Operador OR ||:
Este operador indica que al menos una de las condiciones debe cumplirse para marcarse como TRUE. 
En Go, se representa con el símbolo ||.

Ejemplo: 2 < 0 || 1 > 0 Esto retornará TRUE porque la segunda condición se cumple, a pesar que la primera no.

Operador NOT:
Este operador retornará el opuesto al boleano que está dentro de la variable. Ejemplo:

myBool :=  true
fmt.Println(!myBool) // Esto retornará false

// *** 	CONDICIONALES

// if
func main() {
	valor1 := 1
	valor2 := 2

	if valor1 == 1 {
		fmt.Println("Es 1")
	} else {
		fmt.Println("No es 1")
	}

	// compuerta AND
	if valor1 == 0 && valor2 == 2 {
		fmt.Println("ambas Son verdad")
	} else {
		fmt.Println("AL MENOS UNA ES FALSA")
	}

	// compuerta OR
	if valor1 == 1 || valor2 == 2 {
		fmt.Println("AL MENOS UNA ES VERDADERA")
	}
	// CONVERTIR TEXTO A NUMERO
	value, err := strconv.Atoi("20")
	if err != nil { // nil : palabra reservada del lenguaje para indicar que no hay error
		log.Fatal(err)
	}
	fmt.Println("Valor: ", value)

// *** 	CONDICIONALES

// SWITCH : Utilizar multiples condiciones anidadas
func main() {

	// con condicion especificada
	modulo := 5 % 2
	switch modulo {
	case 0:
		fmt.Println("Es Par")
	default:
		fmt.Println("Es Impar")
	}

	// sin condicion especificada
	valor := 50
	switch {
	case valor > 100:
		fmt.Println("Valor Es mayor que 100")
	case valor < 0:
		fmt.Println("Valor Es menor que 0")
	default:
		fmt.Println("No es una condicion")
	}type
}

// *** 	KEYWORDS

// break
// continue

// defer: ejecuta line de codigo al final
//
//	la buena practica es usar solo defer por codigo
func main() {
	defer fmt.Println("Hola")
	fmt.Println("Mundo")

	// continue y break	se utiliza en un for

	for i := 0; i < 10; i++ {
		fmt.Print(i)

		if i == 2 {
			fmt.Print(" Es 2 ")
			continue
		}
		if i == 8 {
			fmt.Print(" Fin Forzado ")
			break
		}
	}

}
// *** LISTAS
// 		array - slice

func main() {

	//	Array: Se define y Se idica entre corchetes "[ ]" el tamaño del arreglo
	//		Se indica el tipo de variable (int,float64, string, bool, etc)
	//		ASí Se crea un arreglo definido en tamaño "n" inmutable
	// 		sus valores se pueden modificar. mas no su tamaño
	var listaArray [4]int // Por defecto su valor es "0"
	fmt.Println(listaArray)
	listaArray[0] = 1
	listaArray[1] = 2

	// len: Tamaño - cap: Maxima capacidad
	fmt.Println(listaArray, len(listaArray), cap(listaArray))

	//	slice: Se define similar a un array, PERO NO Se idica el TAMAÑO de arreglos
	//		Se indica el tipo de variable (int,float64, string, bool, etc)
	//		Se crea un arreglo DE tamaño VARIABLE

	listaSlice := []int{0, 8, 9, 3, 4, 5, 6} // Por defecto su valor es "0"
	fmt.Println(listaSlice)
	listaSlice[1] = 1
	listaSlice[2] = 2

	// len: Tamaño - cap: Maxima capacidad
	fmt.Println(listaSlice, len(listaSlice), cap(listaSlice))

	// Métodos en el slice [vorde interno:vorde externo]
	//		Vorde interno es inclusivo. el valor se icluye en la consulta u operacion
	//		Vorde externo es excluyente. no se incluye el resultado.

	fmt.Print(listaSlice[0])
	fmt.Print(listaSlice[:3])
	fmt.Print(listaSlice[2:4])
	fmt.Println(listaSlice[4:])
	//	Los slice son mutables, se pueden agregar elementos
	//			Se agregan elemetos con el metodo append
	listaSlice = append(listaSlice, 7)
	fmt.Println(listaSlice, len(listaSlice), cap(listaSlice))

	//			Se pueden agregar listas dentro de otra lista con metodo append
	otroSlice := []int{7, 8, 9}
	listaSlice = append(listaSlice, otroSlice...)
	fmt.Println(listaSlice, len(listaSlice), cap(listaSlice))

	// RECORRER SLICE
	slice := []string{"Hola", "Como", "Te", "a", "ido"}
	for i := range slice {
		fmt.Print(i, " ")
	}
	fmt.Println("")
	for i, valor := range slice {
		fmt.Println(i, valor)
	}
	for _, valor := range slice {
		fmt.Print(valor, " ")
	}

}

// EJEMPLO
//
//	palindrome
func esPalindrome(text string) {
	var textReverso string
	text = strings.ToLower(text)

	for i := len(text) - 1; i >= 0; i-- {
		textReverso += string(text[i])
	}
	if text == textReverso {
		fmt.Println("Es Palindrome")
	} else {
		fmt.Println("No es palindrome")
	}
}
func main() {
	frase := "raDar"
	fmt.Println(frase)
	esPalindrome(frase)
}


// **** LLAVE - VALOR  :: Ejemplo: DICCIONARIO
// 		En go, se define con un la palabra reservada "map"
//		(map[Tipo de variable de la LLAVE]Tipo de variable del VALOR)

func main() {
	urna := make(map[string]int)
	urna["ALCALDE1"] = 10
	urna["ALCALDE2"] = 51
	urna["ALCALDE3"] = 37

	fmt.Println(urna)

	// RECORRIDO DE map

	for k, v := range urna {
		fmt.Println(k, v)
	}

	// IMPRIMIR SOLO LLAVE DE map
	for k := range urna {
		fmt.Println(k)
	}

	// IMPRIMIR SOLO VALOR DE map
	for _, v := range urna {
		fmt.Println(v)
	}

	// PARA VERIFICAR CONTENIDO DE UNA LLAVE =>>
	// SE DEFINE ASI: "variable 1, variable 2 = map[key]"
	// captura LOS SIGUIENTES DATOS DEL map[key} =>>
	// llave = value, verificacion(true, flase) = ok
	value, ok := urna["ALCALDE1"]
	fmt.Println(value, ok)

	// SI LLAVE NO EXISTE "value = 0" & "ok = false"
	v, o := urna["ALCALDE4"]
	fmt.Println(v, o)

	x := urna["ALCALDE3"]
	fmt.Println(x)

	_, y := urna["ALCALDE3"]
	fmt.Println(y)

}
